{"mappings":"YAiBE,IAAkBA,KAcV,UAXU,IAAIC,SAAQ,SAACC,EAASC,GAClC,IAAMC,EAASC,KAAKC,SAAW,GAC/BC,YAAW,WACHH,GACAF,EAAQ,oBAAuCM,OAALR,IAEhCG,EAAP,kC,GARD,I,KAaGM,MACrB,SAA4BC,GACxBC,QAAQC,IAAI,sBACZD,QAAQC,IAAIF,E,IAH8BG,OAK9C,SAA0BC,GACtBH,QAAQC,IAAI,oBACZD,QAAQC,IAAIE,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n  const makeOrder = dish => {\n    const DELAY = 1000;\n\n    const promise = new Promise((resolve, reject) => {\n        const passed = Math.random() > 0.5;\n        setTimeout(() => {\n            if (passed) {\n                resolve(`✅Вот ваше блюдо: ${dish}`);\n            }\n            reject('❌Извините закончились продукты(');\n        }, DELAY);\n    });\n    return promise;\n   };\nmakeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\nfunction onMakeOrderSuccess(result) {\n    console.log('onMakeOrderSuccess');\n    console.log(result);\n} \nfunction onMakeOrderError(error) {\n    console.log('onMakeOrderError');\n    console.log(error);\n}"],"names":["dish","Promise","resolve","reject","passed","Math","random","setTimeout","concat","then","result","console","log","catch","error"],"version":3,"file":"03-promises.8d2c77af.js.map"}